{"version":3,"file":"nivo-parallel-coordinates.umd.js","sources":["../src/props.js","../src/hooks.js","../src/ParallelCoordinatesLineTooltip.js","../src/ParallelCoordinatesLine.js","../src/ParallelCoordinates.js","../src/ParallelCoordinatesCanvas.js","../src/ResponsiveParallelCoordinates.js","../src/ResponsiveParallelCoordinatesCanvas.js"],"sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { lineCurvePropType } from '@nivo/core'\nimport { ordinalColorsPropType } from '@nivo/colors'\n\nconst commonVariablePropTypes = {\n    key: PropTypes.string.isRequired,\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n}\n\nexport const commonPropTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    variables: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.shape({\n                ...commonVariablePropTypes,\n                key: PropTypes.string.isRequired,\n                type: PropTypes.oneOf(['point']).isRequired,\n                padding: PropTypes.number,\n                values: PropTypes.arrayOf(\n                    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n                ),\n                tickValues: PropTypes.arrayOf(\n                    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n                ),\n            }),\n            PropTypes.shape({\n                ...commonVariablePropTypes,\n                type: PropTypes.oneOf(['linear']).isRequired,\n                min: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['auto'])]),\n                max: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['auto'])]),\n                tickValues: PropTypes.oneOfType([\n                    PropTypes.number,\n                    PropTypes.arrayOf(PropTypes.number),\n                ]),\n            }),\n        ])\n    ).isRequired,\n    layout: PropTypes.oneOf(['horizontal', 'vertical']).isRequired,\n    curve: lineCurvePropType.isRequired,\n    strokeWidth: PropTypes.number.isRequired,\n    lineOpacity: PropTypes.number.isRequired,\n    axesPlan: PropTypes.oneOf(['foreground', 'background']).isRequired,\n    axesTicksPosition: PropTypes.oneOf(['before', 'after']).isRequired,\n    colors: ordinalColorsPropType.isRequired,\n}\n\nexport const svgPropTypes = {\n    ...commonPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const commonDefaultProps = {\n    layout: 'horizontal',\n    curve: 'linear',\n    colors: { scheme: 'yellow_orange_red' },\n    strokeWidth: 2,\n    lineOpacity: 0.35,\n    axesPlan: 'foreground',\n    axesTicksPosition: 'after',\n    animate: true,\n    motionConfig: 'gentle',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    role: 'img',\n}\n","import { useMemo } from 'react'\nimport { line } from 'd3-shape'\nimport { scaleLinear, scalePoint } from 'd3-scale'\nimport { curveFromProp } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\n\nexport const computeParallelCoordinatesLayout = ({ width, height, data, variables, layout }) => {\n    const variablesScale = scalePoint()\n        .range(layout === 'horizontal' ? [0, width] : [height, 0])\n        .domain(variables.map(({ key }) => key))\n\n    const range = layout === 'horizontal' ? [height, 0] : [0, width]\n    const variablesWithScale = variables.map(variable => {\n        const allValues = new Set()\n        data.forEach(d => allValues.add(d[variable.key]))\n\n        let scale\n        if (variable.type === 'linear') {\n            const min =\n                variable.min !== undefined && variable.min !== 'auto'\n                    ? variable.min\n                    : Math.min(...Array.from(allValues))\n            const max =\n                variable.max !== undefined && variable.max !== 'auto'\n                    ? variable.max\n                    : Math.max(...Array.from(allValues))\n\n            scale = scaleLinear().rangeRound(range).domain([min, max])\n        }\n\n        if (variable.type === 'point') {\n            scale = scalePoint()\n                .range(range)\n                .domain(variable.values || allValues)\n\n            if (variable.padding !== undefined) {\n                scale.padding(variable.padding)\n            }\n        }\n\n        return {\n            ...variable,\n            scale,\n            values: Array.from(allValues),\n        }\n    })\n\n    const dataWithPoints = data.map((datum, index) => {\n        const points = variablesWithScale.map(variable => ({\n            x:\n                layout === 'horizontal'\n                    ? variablesScale(variable.key)\n                    : variable.scale(datum[variable.key]),\n            y:\n                layout === 'horizontal'\n                    ? variable.scale(datum[variable.key])\n                    : variablesScale(variable.key),\n        }))\n\n        return { index, ...datum, points }\n    })\n\n    return {\n        variablesScale,\n        variablesWithScale,\n        dataWithPoints,\n    }\n}\n\nexport const computeAxisDensity = (variable, data) => {\n    let kernels\n    if (variable.type === 'point') {\n        kernels = data.reduce((acc, datum) => {\n            const value = datum[variable.key]\n            let kernel = acc.find(k => k.id === value)\n            if (kernel === undefined) {\n                kernel = { id: value, count: 0 }\n                acc.push(kernel)\n            }\n            kernel.count++\n\n            return acc\n        }, [])\n        kernels = variable.scale\n            .domain()\n            .map(d => kernels.find(k => k.id === d))\n            .filter(k => k !== undefined)\n    } else if (variable.type === 'linear') {\n        kernels = variable.scale.ticks(5).map((id, index, ticks) => {\n            if (index === 0) {\n                return {\n                    id,\n                    count: variable.values.filter(v => v <= id).length,\n                }\n            }\n\n            return {\n                id,\n                count: variable.values.filter(v => v > ticks[index - 1] && v <= id).length,\n            }\n        })\n    }\n\n    if (kernels !== undefined) {\n        const scale = scaleLinear()\n            .rangeRound([0, 60])\n            .domain([0, Math.max(...kernels.map(k => k.count))])\n\n        return kernels.map(k => ({\n            id: k.id,\n            position: variable.scale(k.id),\n            size: scale(k.count),\n        }))\n    }\n\n    return []\n}\n\nexport const useParallelCoordinates = ({\n    width,\n    height,\n    data,\n    variables,\n    layout,\n    colors,\n    curve,\n}) => {\n    const getLineColor = useOrdinalColorScale(colors, 'index')\n\n    const lineGenerator = useMemo(\n        () =>\n            line()\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n\n    const { variablesScale, variablesWithScale, dataWithPoints } = useMemo(\n        () =>\n            computeParallelCoordinatesLayout({\n                width,\n                height,\n                data,\n                variables,\n                layout,\n            }),\n        [width, height, data, variables, layout]\n    )\n\n    return {\n        variablesScale,\n        variablesWithScale,\n        dataWithPoints,\n        getLineColor,\n        lineGenerator,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { TableTooltip } from '@nivo/tooltip'\n\nconst ParallelCoordinatesLineTooltip = ({ data, variables }) => {\n    return (\n        <TableTooltip\n            rows={variables.map(variable => [\n                variable.key,\n                <strong>{data[variable.key]}</strong>, // eslint-disable-line react/jsx-key\n            ])}\n        />\n    )\n}\n\nParallelCoordinatesLineTooltip.propTypes = {\n    data: PropTypes.object.isRequired,\n    variables: PropTypes.arrayOf(\n        PropTypes.shape({\n            key: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        })\n    ).isRequired,\n}\n\nexport default memo(ParallelCoordinatesLineTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport ParallelCoordinatesLineTooltip from './ParallelCoordinatesLineTooltip'\n\nconst ParallelCoordinatesLine = ({\n    data,\n    variables,\n    lineGenerator,\n    points,\n    strokeWidth,\n    color,\n    opacity,\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseHover = useCallback(\n        event => {\n            showTooltipFromEvent(\n                <ParallelCoordinatesLineTooltip data={data} variables={variables} />,\n                event\n            )\n        },\n        [data, variables]\n    )\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(lineGenerator(points))\n    const animatedProps = useSpring({\n        color,\n        opacity,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            stroke={animatedProps.color}\n            strokeWidth={strokeWidth}\n            strokeLinecap=\"round\"\n            opacity={animatedProps.opacity}\n            fill=\"none\"\n            onMouseEnter={handleMouseHover}\n            onMouseMove={handleMouseHover}\n            onMouseLeave={hideTooltip}\n        />\n    )\n}\n\nParallelCoordinatesLine.propTypes = {\n    data: PropTypes.object.isRequired,\n    variables: PropTypes.arrayOf(\n        PropTypes.shape({\n            key: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        })\n    ).isRequired,\n    lineGenerator: PropTypes.func.isRequired,\n    points: PropTypes.arrayOf(\n        PropTypes.shape({\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired,\n        })\n    ).isRequired,\n    strokeWidth: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    opacity: PropTypes.number.isRequired,\n}\n\nexport default memo(ParallelCoordinatesLine)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { SvgWrapper, useDimensions, withContainer } from '@nivo/core'\nimport { Axis } from '@nivo/axes'\nimport { svgPropTypes, svgDefaultProps } from './props'\nimport { useParallelCoordinates } from './hooks'\nimport ParallelCoordinatesLine from './ParallelCoordinatesLine'\n\nconst ParallelCoordinates = ({\n    data,\n    variables,\n    layout,\n    width,\n    height,\n    margin: partialMargin,\n    axesPlan,\n    axesTicksPosition,\n    strokeWidth,\n    lineOpacity,\n    curve,\n    colors,\n    role,\n}) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { variablesScale, variablesWithScale, dataWithPoints, lineGenerator, getLineColor } =\n        useParallelCoordinates({\n            width: innerWidth,\n            height: innerHeight,\n            data,\n            variables,\n            layout,\n            colors,\n            curve,\n        })\n\n    const axes = variablesWithScale.map(variable => (\n        <Axis\n            key={variable.key}\n            axis={layout === 'horizontal' ? 'y' : 'x'}\n            length={layout === 'horizontal' ? innerHeight : innerWidth}\n            x={layout === 'horizontal' ? variablesScale(variable.key) : 0}\n            y={layout === 'horizontal' ? 0 : variablesScale(variable.key)}\n            scale={variable.scale}\n            ticksPosition={variable.ticksPosition || axesTicksPosition}\n            tickValues={variable.tickValues}\n            tickSize={variable.tickSize}\n            tickPadding={variable.tickPadding}\n            tickRotation={variable.tickRotation}\n            format={variable.tickFormat}\n            legend={variable.legend}\n            legendPosition={variable.legendPosition}\n            legendOffset={variable.legendOffset}\n        />\n    ))\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {axesPlan === 'background' && axes}\n            {dataWithPoints.map(datum => (\n                <ParallelCoordinatesLine\n                    key={datum.index}\n                    data={datum}\n                    variables={variables}\n                    lineGenerator={lineGenerator}\n                    points={datum.points}\n                    strokeWidth={strokeWidth}\n                    opacity={lineOpacity}\n                    color={getLineColor(datum)}\n                />\n            ))}\n            {axesPlan === 'foreground' && axes}\n        </SvgWrapper>\n    )\n}\n\nParallelCoordinates.propTypes = svgPropTypes\n\nconst WrappedParallelCoordinates = withContainer(ParallelCoordinates)\nWrappedParallelCoordinates.defaultProps = svgDefaultProps\n\nexport default WrappedParallelCoordinates\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { useDimensions, useTheme, withContainer } from '@nivo/core'\nimport { renderAxisToCanvas } from '@nivo/axes'\nimport { commonPropTypes, commonDefaultProps } from './props'\nimport { useParallelCoordinates } from './hooks'\n\nconst ParallelCoordinatesCanvas = ({\n    data,\n    layout,\n    variables,\n    width,\n    height,\n    margin: partialMargin,\n    curve,\n    colors,\n    lineOpacity,\n    strokeWidth,\n    axesTicksPosition,\n    pixelRatio,\n}) => {\n    const canvasEl = useRef(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { variablesScale, variablesWithScale, dataWithPoints, lineGenerator, getLineColor } =\n        useParallelCoordinates({\n            width: innerWidth,\n            height: innerHeight,\n            data,\n            variables,\n            layout,\n            colors,\n            curve,\n        })\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        lineGenerator.context(ctx)\n        dataWithPoints.forEach(datum => {\n            ctx.save()\n            ctx.globalAlpha = lineOpacity\n\n            ctx.beginPath()\n            lineGenerator(datum.points)\n            ctx.strokeStyle = getLineColor(datum)\n            ctx.lineWidth = strokeWidth\n            ctx.stroke()\n\n            ctx.restore()\n        })\n\n        variablesWithScale.map(variable => {\n            renderAxisToCanvas(ctx, {\n                axis: layout === 'horizontal' ? 'y' : 'x',\n                scale: variable.scale,\n                x: layout === 'horizontal' ? variablesScale(variable.key) : 0,\n                y: layout === 'horizontal' ? 0 : variablesScale(variable.key),\n                length: layout === 'horizontal' ? innerHeight : innerWidth,\n                ticksPosition: axesTicksPosition,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        lineGenerator,\n        getLineColor,\n        lineOpacity,\n        strokeWidth,\n        dataWithPoints,\n        variablesWithScale,\n        layout,\n        axesTicksPosition,\n        theme,\n        pixelRatio,\n    ])\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n        />\n    )\n}\n\nParallelCoordinatesCanvas.propTypes = {\n    ...commonPropTypes,\n    pixelRatio: PropTypes.number.isRequired,\n}\n\nconst WrappedParallelCoordinatesCanvas = withContainer(ParallelCoordinatesCanvas)\nWrappedParallelCoordinatesCanvas.defaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n\nexport default WrappedParallelCoordinatesCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport ParallelCoordinates from './ParallelCoordinates'\n\nconst ResponsiveParallelCoordinates = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ParallelCoordinates width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveParallelCoordinates\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport ParallelCoordinatesCanvas from './ParallelCoordinatesCanvas'\n\nconst ResponsiveParallelCoordinatesCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <ParallelCoordinatesCanvas width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveParallelCoordinatesCanvas\n"],"names":["commonVariablePropTypes","key","PropTypes","string","isRequired","ticksPosition","oneOf","tickSize","number","tickPadding","tickRotation","format","oneOfType","func","legend","node","legendPosition","legendOffset","commonPropTypes","data","arrayOf","object","variables","shape","type","padding","values","tickValues","min","max","layout","curve","lineCurvePropType","strokeWidth","lineOpacity","axesPlan","axesTicksPosition","colors","ordinalColorsPropType","svgPropTypes","role","commonDefaultProps","scheme","animate","motionConfig","svgDefaultProps","useParallelCoordinates","width","height","getLineColor","useOrdinalColorScale","lineGenerator","useMemo","line","x","d","y","curveFromProp","variablesScale","scalePoint","range","domain","map","variablesWithScale","variable","scale","allValues","Set","forEach","add","undefined","Math","Array","from","scaleLinear","rangeRound","dataWithPoints","datum","index","points","computeParallelCoordinatesLayout","ParallelCoordinatesLineTooltip","_jsx","TableTooltip","rows","propTypes","memo","ParallelCoordinatesLine","color","opacity","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseHover","useCallback","event","useMotionConfig","springConfig","config","animatedPath","useAnimatedPath","animatedProps","useSpring","immediate","animated","path","stroke","strokeLinecap","fill","onMouseEnter","onMouseMove","onMouseLeave","ParallelCoordinates","partialMargin","margin","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","axes","Axis","axis","length","tickFormat","_jsxs","SvgWrapper","WrappedParallelCoordinates","withContainer","defaultProps","ParallelCoordinatesCanvas","pixelRatio","canvasEl","useRef","theme","useTheme","useEffect","current","ctx","getContext","fillStyle","background","fillRect","translate","left","top","context","save","globalAlpha","beginPath","strokeStyle","lineWidth","restore","renderAxisToCanvas","ref","style","WrappedParallelCoordinatesCanvas","window","devicePixelRatio","props","ResponsiveWrapper"],"mappings":"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"}